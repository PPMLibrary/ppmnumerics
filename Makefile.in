#-------------------------------------------------------------------------
#  File         :  Makefile.in
#-------------------------------------------------------------------------
#
#  Purpose      :  Makefile template
#
#  Remarks      :
#
#  References   :
#
#  Revisions    :
#-------------------------------------------------------------------------
#  Parallel Particle Mesh Library (PPM)
#  ETH Zurich
#  CH-8092 Zurich, Switzerland
#-------------------------------------------------------------------------

# These variables are set when configure is ran
srcdir = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@
libdir = @libdir@
includedir = @includedir@
builddir = @builddir@
LIBS = @LIBS@
LDFLAGS = @LDFLAGS@
CFLAGS = @CFLAGS@
FCLIBS = @FCLIBS@
FCFLAGS = @FCFLAGS@
FC = @FC@
CC = @CC@
CXX = @CXX@
SED := @SED@
DEBUG = @DEBUG@
MODFLAG = @ax_cv_f90_modflag@
PPMDIR = @PPMDIR@

# These variables are standard
LIB_PPM := libppmnumerics.a
TARGET  := $(builddir)/lib/$(LIB_PPM)
SHELL := /bin/sh
CPP := cpp
FUNIT := $(PPMDIR)/utils/funit/bin/funit
DEPS := $(PPMDIR)/utils/deps.sh
LOG := compile.log
RUN := $(PPMDIR)/utils/runcmd.sh

# These are important build directories
SRC_DIR := $(srcdir)
OBJ_DIR := $(builddir)/objects
MODULES_DIR := $(builddir)/include/ppm

# These are paths that get included during pre-processing
CPPVPATH := $(SRC_DIR):
CPPVPATH += $(MODULES_DIR):
CPPINCLS := $(patsubst %,-I%, $(subst :, ,$(CPPVPATH)))

# These are paths that get included during compilation
VPATH := $(patsubst %,-I%, $(subst :, ,$(SRC_DIR))):
VPATH += $(patsubst %,$(MODFLAG)%, $(subst :, ,$(MODULES_DIR))):
INCLS := $(subst :, ,$(VPATH))

# These are the files that get generated and used during compilation
SOURCES := $(notdir $(wildcard $(SRC_DIR)/ppm_module_*.f))
OBJECTS := $(SOURCES:%.f=$(OBJ_DIR)/%.o)
MODULES := $(SOURCES:%.f=$(MODULES_DIR)/%.mod)
MODSRCS := $(SOURCES:%.f=$(MODULES_DIR)/__%.f)
DEPENDENCIES := $(SOURCES:%.f=$(OBJ_DIR)/%.d)

# This creates the install directories if they don't exist
$(warning Checking for directories...)
$(shell test -d $(OBJ_DIR) || mkdir $(OBJ_DIR))
$(shell test -d $(MODULES_DIR) || mkdir -p $(MODULES_DIR))
$(shell test -d $(builddir)/lib || mkdir $(builddir)/lib)
$(shell test -d $(libdir) || mkdir $(libdir))
$(shell test -e $(LOG) && rm $(LOG))
$(warning done.)

.PHONY: all clean install new test

.DEFAULT: ;

all: $(TARGET)

# This archives all of the objects in the PPM library
ARCMD = ar crus $@ $(OBJECTS)
$(TARGET): $(OBJECTS)
	@printf "  AR   %-42s" "Creating library archive"; \
	$(RUN) "$(ARCMD)" $(LOG) "Error Creating Archive"; \
	echo "\033[0;32mDone\033[0m."

# Dont delete the given intermediate files
.SECONDARY: #$(DEPENDENCIES)

# Implicit rules
CPPCMD = $(CPP) $(CPPFLAGS) $(CPPINCLS) -traditional-cpp -P $< $@
$(OBJ_DIR)/%.f : $(SRC_DIR)/%.f
	@printf "  CPP  %-42s" $<; \
	$(RUN) "$(CPPCMD)" $(LOG) "Preprocessing Error"

ENV = CPP="$(CPP)" SED="$(SED)" INC="$(CPPINCLS)" DEFINE="$(CPPFLAGS)" OBJDIR="$(OBJ_DIR)" SRCDIR="$(SRC_DIR)"
DEPCMD = $(DEPS) --ppm $< $@
$(OBJ_DIR)/%.d : $(SRC_DIR)/%.f $(OBJ_DIR)/%.f
	@printf "  DEP  %-42s" $<; \
	$(ENV) $(RUN) "$(DEPCMD)" $(LOG) "Dependency Error"

COMPILECMD = $(FC) $(INCLS) $(LDFLAGS) $(FCFLAGS) $(LIBS) $(DEBUG) -Llib -c -o $@ $<
$(OBJ_DIR)/%.o : $(OBJ_DIR)/%.f
	@printf "  FC   %-42s" $<; \
	$(RUN) "$(COMPILECMD)" $(LOG) "Compile Error" \
	&& mv $(builddir)/*.mod $(MODULES_DIR)

# This is used to clean up the files created when running make
clean:
	rm -fR $(OBJ_DIR)
	rm -fR $(MODULES_DIR)
	rm -fR $(builddir)/lib

# This copies the PPM library into libdir
install: all
	@echo '[ deploying to '$(libdir)']'
	@cp $(TARGET) $(libdir)
	@ranlib $(libdir)/$(LIB_PPM)
	@echo '[ deploying modules to '$(includedir)/ppm']'
	@mkdir -p $(includedir)/ppm
	@cp $(MODULES_DIR)/* $(includedir)/ppm

# This compiles, and copies the PPM library
new: all install

# This ensures all dependency files are up-to-date
# WARNING: The directive below will fail silently, in case of problems
# remove the leading s: include $(DEPENDENCIES)
sinclude $(DEPENDENCIES)
